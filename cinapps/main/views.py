from django.shortcuts import render
import os
import json
import pandas as pd
import requests
from datetime import datetime
from decimal import Decimal
from .models import PredictionFilm
from .functions import scoring_casting, get_studio_coefficient
from .services import (
    get_films_from_api,
    get_acteurs_by_film_api,
    get_realisateurs_by_film_api,
    get_api_token,
)


class DecimalEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, Decimal):
            return str(obj)
        return super().default(obj)


# Charger le CSV une seule fois au chargement
actors = pd.read_csv('main/acteurs_coef.csv')


def home_page(request):
    # 1. R√©cup√©rer les films depuis l‚ÄôAPI CRUD
    films = get_films_from_api()
    print(f"üé¨ Films r√©cup√©r√©s depuis l'API CRUD : {len(films)}")

    for film in films:
        # 2. Ajouter acteurs et r√©alisateurs
        film['acteurs'] = get_acteurs_by_film_api(film['id_film'])
        film['realisateurs'] = get_realisateurs_by_film_api(film['id_film'])

        # 3. Calcul du scoring et du coefficient studio
        film['scoring_acteurs_realisateurs'] = scoring_casting(film, actors)
        film['coeff_studio'] = get_studio_coefficient(film['studio'])

    # 4. Lancer les pr√©dictions
    films = get_predictions(films)

    # 5. Trier les films selon pr√©diction d√©croissante
    films_sorted = sorted(
        films,
        key=lambda x: int(x.get('prediction_entrees', 0)) if str(x.get('prediction_entrees', '0')).isdigit() else 0,
        reverse=True
    )

    # 6. Top 10 + Top 2 pour b√©n√©fice
    top_ten_films = films_sorted[:10]
    top_two_films = films_sorted[:2]

    ch_affaires = sum(film.get('estimation_recette_hebdo', 0) for film in top_two_films)
    charge = 4900
    benefice = ch_affaires - charge

    tab_result = {
        'ch_affaires': ch_affaires,
        'charge': charge,
        'benefice': benefice
    }

    return render(request, "main/home_page.html", {
        "films": top_ten_films,
        "top_two": top_two_films,
        "tab_result": tab_result
    })


def get_predictions(films):
    url = os.getenv('URL_API')
    token = get_api_token()

    if not token:
        print("‚ùå Aucun token re√ßu pour acc√©der √† l'API de pr√©diction.")
        return films

    print(f"üîë TOKEN UTILIS√â : {token}")
    print(f"üì° Requ√™te vers : {url}")

    headers = {
        'Content-Type': 'application/json',
        'Authorization': f"Bearer {token}"
    }

    for film in films:
        try:
            year = datetime.strptime(film['date_sortie'], "%Y-%m-%d").year if film['date_sortie'] else None
        except Exception as e:
            print(f"‚ùå Erreur parsing date_sortie pour {film['titre']} : {e}")
            year = None

        data = {
            'budget': film['budget'] if film['budget'] is not None else 25000000,
            'duree': film['duree'] if film['duree'] is not None else 107,
            'genre': film['genre'] if film['genre'] is not None else 'missing',
            'pays': film['pays'] if film['pays'] is not None else 'missing',
            'salles_premiere_semaine': film['salles'] if film['salles'] is not None else 100,
            'scoring_acteurs_realisateurs': film.get('scoring_acteurs_realisateurs', 0),
            'coeff_studio': film.get('coeff_studio', 0),
            'year': year
        }

        try:
            json_data = json.dumps(data, cls=DecimalEncoder)
            response = requests.post(url, data=json_data, headers=headers)

            if response.status_code == 200:
                prediction = response.json()
                film['prediction_entrees'] = int(float(prediction['prediction']))
                film['estimation_entrees_cinema'] = int(film['prediction_entrees'] / 2000)
                film['estimation_entrees_quot'] = int(film['estimation_entrees_cinema'] / 7)
                film['estimation_recette_hebdo'] = film['estimation_entrees_cinema'] * 10

                PredictionFilm.objects.update_or_create(
                    titre=film['titre'],
                    defaults={'prediction_entrees': film['prediction_entrees']}
                )
            else:
                print(f"‚ùå Erreur pr√©diction {film['titre']} : {response.status_code}")
                film['prediction_entrees'] = None

        except Exception as e:
            print(f"‚ùå Exception pr√©diction pour {film['titre']} : {e}")
            film['prediction_entrees'] = None

    return films


def chiffre_page(request):
    return render(request, 'main/chiffre_page.html')


def archive_page(request):
    return render(request, "main/archive_page.html")

    
    
#Lorsque vous configurez une t√¢che p√©riodique avec Celery, celle-ci est ex√©cut√©e de mani√®re autonome selon
# l'horaire d√©fini, et non pas √† chaque fois que la page est appel√©e. Cela signifie que la t√¢che pour r√©cup√©rer
# les films et obtenir les pr√©dictions se d√©clenchera automatiquement √† l'heure pr√©vue chaque semaine, 
#ind√©pendamment des requ√™tes des utilisateurs sur votre site web.

#Pour clarifier le fonctionnement :

#Planification de la t√¢che : La t√¢che est configur√©e pour s'ex√©cuter √† un moment sp√©cifique 
#(par exemple, tous les lundis √† minuit). Cette planification est g√©r√©e par Celery Beat, 
#qui surveille l'heure et d√©clenche l'ex√©cution de la t√¢che conform√©ment √† son calendrier.
#Ex√©cution ind√©pendante : Une fois d√©clench√©e par Celery Beat, la t√¢che s'ex√©cute de mani√®re ind√©pendante 
#du cycle de vie des requ√™tes HTTP de votre site web. Elle fonctionne en arri√®re-plan et n'affecte pas les
# performances ou le fonctionnement de vos vues Django, sauf si vous avez configur√© quelque chose pour que les 
#vues interagissent avec les r√©sultats de cette t√¢che.
#Non-li√©e aux requ√™tes des utilisateurs : Les utilisateurs qui acc√®dent √† votre site ne d√©clenchent pas cette t√¢che. Ils verront simplement les r√©sultats (par exemple, les films et les pr√©dictions) qui ont √©t√© g√©n√©r√©s et sauvegard√©s lors de la derni√®re ex√©cution de la t√¢che.


#